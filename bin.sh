PROGRAM="IyEvYmluL2Jhc2gKI1RoaXMgaXMgdG9vbCBTY2FuIEROUyB3ZWJzaXRlIGFuZCBWdWxuZXJzCiNOdW1iZXJzCm4xPSIxIgpuMj0iMiIKbjM9IjMiCm40PSI0IgpuNT0iNSIKbjY9IjYiCm43PSI3IgpuOD0iOCIKbjk9IjkiCnk9IlkiCm49Im4iCmlwPSJJUCIKaG9zdD0iSE9TVCIKI0NvbG9ycwp3aGl0ZT0iXDAzM1sxOzM3bSIKZ3JleT0iXDAzM1swOzM3bSIKcHVycGxlPSJcMDMzWzA7MzVtIgpyZWQ9IlwwMzNbMTszMW0iCmdyZWVuPSJcMDMzWzE7MzJtIgp5ZWxsb3c9IlwwMzNbMTszM20iCnB1cnBsZT0iXDAzM1swOzM1bSIKY3lhbj0iXDAzM1swOzM2bSIKY2FmZT0iXDAzM1swOzMzbSIKZml1c2NoYT0iXDAzM1swOzM1bSIKYmx1ZT0iXDAzM1sxOzM0bSIKbmM9IlxlWzBtIgpmdW5jdGlvbiBBUEkoKSB7CiAgICAgICAgZWNobyAtZSAiJGN5YW4gUGxlYXNlIEVudGVyIEFQSSBLRVkhJG5jIgogICAgICAgIGVjaG8gIiIKICAgICAgICByZWFkIC1wICIkKGVjaG8gLWUgJHJlZFskZ3JlZW4rJHJlZF0kbmMpICQoZWNobyAtZSAkd2hpdGUgQVBJIEtFWSA6JG5jKSAiIHRsMgogICAgICAgIGlmIFsgJHRsMiA9IDE0MzYxNjljNDZlMDBmNTU0MWNmOWFiNjQ5ZjU1NjQ0IF07IHRoZW4KICAgICAgICBlY2hvIC1lICIkd25pdGVb4pyTXSRncmVlbiBBUEkgS0VZIGlzIE9ubGluZSDigKIiCiAgICAgICAgc2xlZXAgMwogICAgICAgIGVsaWYgWyAkdGwyID0gYW5vbm9wc3ZuIF07IHRoZW4KICAgICAgICBlY2hvIC1lICIkd25pdGVb4pyTXSRncmVlbiBXZWxjb21lIEJhY2sgLCBBZG1pbiBQaGFtIENoaWVuICIKICAgICAgICBzbGVlcCAzCiAgICAgICAgZWxzZQogICAgICAgIGVjaG8gLWUgIiRyZWRbw5ddIExPTCAsIEVycl9BUElfS0VZIgogICAgICAgIGVjaG8gLWUgIiRncmVlblvDl10gcGxlYXNlIGNvbnRhY3QgdGVsZWdyYW0gQGFub25vcHN2biB0byBnZXQgdGhlIGFwaSIKICAgICAgICBleGl0IDEKICAgICAgICBmaQp9CiMKZnVuY3Rpb24gQmFubmVyKCkgewpjbGVhcgplY2hvIC1lICJbK10kZ3JlZW4gdG9vbCBjaGVja2VyIEluZm9tYXRpb25zIFdlYnNpdGUKJGJsdWUKIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4KICAgICAqICAgLiAgICAgICAgICAgICAgICAgIC4gICAgICAgICAgICAgIC4gICAgICAgIC4gICAqICAgICAgICAgIC4KICAuICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgIC4gICAgICAgLiAgICAgICAgICAgLiAgICAgIC4gICAgICAgIC4KICAgICAgICBvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuICAgICAgICAgICAgICAgICAgIC4KICAgICAgICAgLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgICAgIC4gICAgICAgICAgIC4KICAgICAgICAgIDAgICAgIC4KICAgICAgICAgICBcICAgICAgLiAgICAgICAgICAuICAgICAgICAgICAgICAgICAsICAgICAgICAgICAgICAgICwgICAgLAogLiAgICAgICAgICBcICAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgLgogICAgICAuICAgICAgXCAgICwKICAgLiAgICAgICAgICBvICAgICAuICAgIEFub255bW91c19WTlBDIC4gICAgICAgICAgICAgICAgICAgLiAgICAgICAgICAgIC4KICAgICAuICAgICAgICAgXCAgICAgICAgICAgICAgICAgLCAgICAgICAgICAgICAuICAgICAgICAgICAgICAgIC4KICAgICAgICAgICAgICAgI1wjI1wjICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4gICAgICAgIC4KICAgICAgICAgICAgICMgICNPIyNcIyMjICAgICAgVHViM3JzMDggLiAgICAgICAgICAgICAgICAgICAgICAgIC4KICAgLiAgICAgICAgIyojICAjXCMjXCMjIyAgICAgICAgICAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICwKICAgICAgICAuICAgIyMqIyAgI1wjI1wjIyAgICAgICAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgICAuCiAgICAgIC4gICAgICAjIyojICAjbyMjXCMgICAgICAgICAuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsCiAgICAgICAgICAuICAgICAqIyAgI1wjICAgICAuICAgICAgICAgICAgICAgICAgICAuICAgICAgICAgICAgIC4gICAgICAgICAgLAogICAgICAgICAgICAgICAgICAgICAgXCAgICAgICAgICAuICAgICAgICAgICAgICAgICAgICAgICAgIC4KJGNhZmUgX19fX14vXF9fX14tLV9fX18vXF9fX19PX19fX19fX19fX19fX18vXC9cLS0tL1xfX19fX19fX19fXy0tLV9fX19fX19fX19fX19fCiAgIC9cXiAgIF4gIF4gICAgXiAgICAgICAgICAgICAgICAgIF5eIF4gICdcIF4gICAgICAgICAgXiAgICAgICAtLS0KICAgICAgICAgLS0gICAgICAgICAgIC0gICAgICAgICAgICAtLSAgLSAgICAgIC0gICAgICAgICAtLS0gIF9fICAgICAgIF4KICAgLS0gIF9fICAgICAgICAgICAgICAgICAgICAgIF9fXy0tICBeICBeICAgICAgICAgICAgICAgICAgICAgICAgIC0tICBfXyRuYwokYmx1ZVstLS1dICAgICAgICBUaGUgIEFPUyBTcGxvaXRzICwgRE5TICwgV0VCICgkY2FmZSBDaDEzbiRibHVlKSAgICAgIFstLS1dCiRibHVlWy0tLV0gICAgICAgIENyZWF0ZWQgYnk6JHJlZCBQSEFNIENISUVOJGJsdWUgKCRjYWZlIFRVQjNSUzA4JGJsdWUpICAgICAgICAgWy0tLV0KICAgICAgICAgICAgICAgICAkYmx1ZSBWZXJzaW9uOiRyZWQgMi4wLjAKICAgICAgICAgICAgICAgICAkYmx1ZSBDb2RlbmFtZTokY2FmZSAnVFVCM1JTMDgnCiRibHVlWy0tLV0gICAgICAgIEZvbGxvdyB1cyBvbiBUd2l0dGVyOiRyZWQgQHR1YjNyczA4ICAgICAgICAgICRibHVlICBbLS0tXQokYmx1ZVstLS1dICAgICAgICBGb2xsb3cgbWUgb24gVHdpdHRlcjokcmVkIEBBbm9ueW1vdXNfVk5QQyAgICAkYmx1ZSAgWy0tLV0KJGJsdWVbLS0tXSAgICAgICAgSG9tZXBhZ2U6JGNhZmUgYW5vbm9wc25ldy5ibG9nc3BvdC5jb20gICAgICAgJGJsdWUgICBbLS0tXQokZ3JlZW4gICAgICAgIFdlbGNvbWUgdG8gdGhlIFRvb2wgQW5vbk9wcyBTcGxvaXQgKFZOUEMpLgogICAgICAgICBUaGUgb25lIHN0b3Agc2hvcCBmb3IgYWxsIG9mIHlvdXIgU0UgbmVlZHMuCgoKICAgICAgIFRoZSBBbm9uT3BzIFNwbG9pdCBpcyBhIHByb2R1Y3Qgb2YgQW5vbnltb3VzX1ZOUEMuCgogICAgICAgICAgIFZpc2l0OiBodHRwczovL2Fub25vcHNuZXcuYmxvZ3Nwb3QuY29tCgokcmVkICAgSXQncyBlYXN5IHRvIHVwZGF0ZSB1c2luZyB0aGUgUGVuVGVzdGVycyBGcmFtZXdvcmshIChQVEYpIgp9CmZ1bmN0aW9uIGJhY2soKSB7CiAgICAgICAgcmVhZCAtcCAiJChlY2hvIC1lICRyZWRbJGdyZWVuKyRyZWRdJG5jKSQoZWNobyAtZSAkd2hpdGUgQmFjayBZb3VyIE1lbnUkbmMpICQoZWNobyAtZSAkcmVkWyRncmVlbiR5JG5jJHdoaXRlLyRncmVlbiRuJHJlZF0kbmMpIDogIiBiCiAgICAgICAgaWYgWyAkYiA9IHkgXTsgdGhlbgogICAgICAgIGJhc2ggYmluLnNoCiAgICAgICAgZWxpZiBbICRiID0gWSBdOyB0aGVuCiAgICAgICAgYmFzaCBiaW4uc2gKICAgICAgICBlbGlmIFsgJGIgPSB5ZXMgXTsgdGhlbgogICAgICAgIGJhc2ggYmluLnNoCiAgICAgICAgZWxpZiBbICRiID0gWUVTIF07IHRoZW4KICAgICAgICBiYXNoIGJpbi5zaAogICAgICAgIGVsaWYgWyAkYiA9IFlFcyBdOyB0aGVuCiAgICAgICAgYmFzaCBiaW4uc2gKICAgICAgICBlbGlmIFsgJGIgPSB5RVMgXTsgdGhlbgogICAgICAgIGJhc2ggYmluLnNoCiAgICAgICAgZWxpZiBbICRiID0gWWVTIF07IHRoZW4KICAgICAgICBiYXNoIGJpbi5zaAogICAgICAgIGVsaWYgWyAkYiA9IG5vIF07IHRoZW4KICAgICAgICBlY2hvICIiCiAgICAgICAgZWNobyAtZSAiICAgICAgICRjeWFuIFByb2dyYW0gQ2xvc2VkIC4uICRuYyIKICAgICAgICBlY2hvICIiCiAgICAgICAgZWxpZiBbICRiID0gTk8gXTsgdGhlbgogICAgICAgIGVjaG8gIiIKICAgICAgICBlY2hvIC1lICIgICAgICAgJGN5YW4gUHJvZ3JhbSBDbG9zZWQgLi4gJG5jIgogICAgICAgIGVjaG8gIiIKICAgICAgICBlbGlmIFsgJGIgPSBObyBdOyB0aGVuCiAgICAgICAgZWNobyAiIgogICAgICAgIGVjaG8gLWUgIiAgICAgICAkY3lhbiBQcm9ncmFtIENsb3NlZCAuLiAkbmMiCiAgICAgICAgZWNobyAiIgogICAgICAgIGVsaWYgWyAkYiA9IG5PIF07IHRoZW4KICAgICAgICBlY2hvICIiCiAgICAgICAgZWNobyAtZSAiICAgICAgICRjeWFuIFByb2dyYW0gQ2xvc2VkIC4uICRuYyIKICAgICAgICBlY2hvICIiCiAgICAgICAgZWxpZiBbICRiID0gTiBdOyB0aGVuCiAgICAgICAgZWNobyAiIgogICAgICAgIGVjaG8gLWUgIiAgICAgICAkY3lhbiBQcm9ncmFtIENsb3NlZCAuLiAkbmMiCiAgICAgICAgZWNobyAiIgogICAgICAgIGVsaWYgWyAkYiA9IG4gXTsgdGhlbgogICAgICAgIGVjaG8KICAgICAgICBlY2hvIC1lICIgICAgICAgJGN5YW4gUHJvZ3JhbSBDbG9zZWQgLi4gJG5jIgogICAgICAgIGVjaG8KICAgICAgICBlbHNlCiAgICAgICAgZWNobyAiIgogICAgICAgIGVjaG8gLWUgIiRyZWQgNDA0IE5vdCBGb3VuZCAuIgoKZmkKfQpmdW5jdGlvbiBkaXJlY3RiYWNrKCkgewogICAgICAgICAgICAgICAgYmFzaCBiaW4uc2gKICAgICAgICB9CkJhbm5lcgpBUEkKZWNobyAiIgplY2hvIC1lICIkZ3JlZW49PT4gMS4gJHllbGxvdyAoU2NhbiBQb3J0ICYgVnVsbmVycykiCmVjaG8gLWUgIiRncmVlbj09PiAyLiAkeWVsbG93IChXaG9pcyBSZXBvcnQgTG9va3VwKSIKZWNobyAtZSAiJGdyZWVuPT0+IDMuICR5ZWxsb3cgKENoZWNrZXIgRE5TIExvb2t1cCkiCmVjaG8gLWUgIiRncmVlbj09PiA0LiAkeWVsbG93IChDaGVja2VyIEJJTi9JSU4pIgplY2hvIC1lICIkZ3JlZW49PT4gNS4gJHllbGxvdyAoQ29udGFjdCBNZSkiCmVjaG8gLWUgIiRncmVlbj09PiA2LiAkeWVsbG93IChERG9TKSIKZWNobyAtZSAiJGdyZWVuPT0+IDcuICR5ZWxsb3cgKEVtYWlsIENoZWNrZXIgQWRkcmVzcykiCmVjaG8gLWUgIiRncmVlbj09PiA4LiAkeWVsbG93IChQaG9uZSBDaGVja2VyIEFkZHJlc3MpIgplY2hvIC1lICIkZ3JlZW49PT4gOS4gJHllbGxpb3cgKEV4aXQpIgplY2hvICIiCnJlYWQgLXAgIiQoZWNobyAtZSAkcmVkWyRncmVlbiskcmVkXSRuYykgJChlY2hvIC1lICR3aGl0ZSBFbnRlciBUaGUgTWV0aG9kIDokbmMpICIgbXQKaWYgWyAkbXQgPSAxIF07IHRoZW4KZWNobyAtZSAiJGdyZWVuPT0+IDEuICR5ZWxsb3cgKG5tYXApIgplY2hvIC1lICIkZ3JlZW49PT4gMi4gJHllbGxvdyAobmNhdCkiCmVjaG8gLWUgIiRncmVlbj09PiAzLiAkeWVsbG93IChuaWt0bykiCmVjaG8gLWUgIiRncmVlbj09PiA0LiAkeWVsbG93IChDdXJsKSIKZWNobyAtZSAiJGdyZWVuPT0+IDUuIEJhY2sgSW4gTWVudSIKZWNobyAiIgpyZWFkIC1wICIkKGVjaG8gLWUgJHJlZFskZ3JlZW4rJHJlZF0kbmMpICQoZWNobyAtZSAkd2hpdGUgRW50ZXIgVGhlIE1ldGhvZCA6JG5jKSAiIG10MgppZiBbICRtdDIgPSAxIF07IHRoZW4KZWNobyAtZSAiJGdyZWVuPT0+IDEuICR5ZWxsb3cgKGh0dHAtc3FsLWluamVjdGlvbikiCmVjaG8gLWUgIiRncmVlbj09PiAyLiAkeWVsbG93IChodHRwLXdvcmRwcmVzcy11c2VycykiCmVjaG8gLWUgIiRncmVlbj09PiAzLiAkeWVsbG93ICh2dWxuZXJzKSIKZWNobyAtZSAiJGdyZWVuPT0+IDQuICR5ZWxsb3cgKHNhZmUpIgplY2hvIC1lICIkZ3JlZW49PT4gNS4gJHllbGxvdyAoaHR0cC1zdG9yZWQteHNzKSIKZWNobyAtZSAiJGdyZWVuPT0+IDYuICR5ZWxsb3cgKGh0dHAtZG9tYmFzZWQteHNzKSIKZWNobyAtZSAiJGdyZWVuPT0+IDcuJHllbGxvdyAoaHR0cC1jb29raWUtZmxhZ3MpIgplY2hvIC1lICIkZ3JlZW49PT4gOC4keWVsbG93IChodHRwLWRsaW5rLWJhY2tkb29yKSIKZWNobyAtZSAiJGdyZWVuPT0+IDkuJHllbGxvdyAoaHR0cC1lbnVtKSIKZWNobyAtZSAiJGdyZWVuPT0+IDEwLiR5ZWxsb3cgKGh0dHAtdnVsbi1jdmUyMDEwLTI4NjEpIgplY2hvIC1lICIkZ3JlZW49PT4gMTEuJHllbGxvdyAoaHR0cC12dWxuLWN2ZTIwMTEtMzE5MikiCmVjaG8gLWUgIiRncmVlbj09PiAxMi4keWVsbG93IChodHRwLXZ1bG4tY3ZlMjAxMS0zMzY4KSIKZWNobyAtZSAiJGdyZWVuPT0+IDEzLiR5ZWxsb3cgKGh0dHAtdnVsbi1jdmUyMDA2LTMzOTIpIgplY2hvIC1lICIkZ3JlZW49PT4gMTQuJHllbGxvdyAoaHR0cC12dWxuLWN2ZTIwMDktMzk2MCkiCnJlYWQgLXAgIiQoZWNobyAtZSAkcmVkWyRncmVlbiskcmVkXSRuYykgJChlY2hvIC1lICR3aGl0ZSBFbnRlciBUaGUgTWV0aG9kIDokbmMpICIgbXQzCnJlYWQgLXAgIiQoZWNobyAtZSAkcmVkWyRncmVlbiskcmVkXSRuYykgJChlY2hvIC1lICR3aGl0ZSBFbnRlciBUaGUgVGFyZ2V0IDokbmMpICIgdGFnCmlmIFsgJG10MyA9IDEgXTsgdGhlbgplY2hvIC1lICIkZ3JlZW4iCm5tYXAgLWQgLXZ2IC0tc2NyaXB0PWh0dHAtc3FsLWluamVjdGlvbiAkdGFnCmJhY2sKZWxpZiBbICRtdDMgPSAyIF07IHRoZW4KZWNobyAtZSAiJGdyZWVuIgpubWFwIC1kIC12diAtLXNjcmlwdD1odHRwLXdvcmRwcmVzcy11c2VycyAkdGFnCmJhY2sKZWxpZiBbICRtdDMgPSAzIF07IHRoZW4KZWNobyAtZSAiJGdyZWVuIgpubWFwIC1kIC12diAtLXNjcmlwdD12dWxuZXJzICR0YWcKYmFjawplbGlmIFsgJG10MyA9IDQgXTsgdGhlbgplY2hvIC1lICIkZ3JlZW4iCm5tYXAgLWQgLXZ2IC0tc2NyaXB0PXNhZmUgJHRhZwpiYWNrCmVsaWYgWyAkbXQzID0gNSBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbm1hcCAtZCAtdnYgLS1zY3JpcHQ9aHR0cC1zdG9yZWQteHNzICR0YWcKYmFjawplbGlmIFsgJG10MyA9IDYgXTsgdGhlbgplY2hvIC1lICIkZ3JlZW4iCm5tYXAgLWQgLXZ2IC0tc2NyaXB0PWh0dHAtZG9tYmFzZWQteHNzICR0YWcKYmFjawplbGlmIFsgJG10MyA9IDcgXTsgdGhlbgplY2hvIC1lICIkZ3JlZW4iCm5tYXAgLWQgLXZ2IC0tc2NyaXB0PWh0dHAtY29va2llLWZsYWdzICR0YWcKYmFjawplbGlmIFsgJG10MyA9IDggXTsgdGhlbgplY2hvIC1lICIkZ3JlZW4iCm5tYXAgLWQgLXZ2IC0tc2NyaXB0PWh0dHAtZGxpbmstYmFja2Rvb3IgJHRhZwpiYWNrCmVsaWYgWyAkbXQzID0gOSBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbm1hcCAtZCAtdnYgLS1zY3JpcHQ9aHR0cC12dWxuLWN2ZTIwMTAtMjg2MSAkdGFnCmJhY2sKZWxpZiBbICRtdDMgPSAxMCBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbm1hcCAtZCAtdnYgLS1zY3JpcHQ9aHR0cC12dWxuLWN2ZTIwMTEtMzE5MiAkdGFnCmJhY2sKZWxpZiBbICRtdDMgPSAxMSBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbm1hcCAtZCAtdnYgLS1zY3JpcHQ9aHR0cC12dWxuLWN2ZTIwMTEtMzM2OCAkdGFnCmJhY2sKZWxpZiBbICRtdDMgPSAxMiBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbm1hcCAtZCAtdnYgLS1zY3JpcHQ9aHR0cC12dWxuLWN2ZTIwMDYtMzM5MiAkdGFnCmJhY2sKZWxpZiBbICRtdDMgPSAxMyBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbm1hcCAtZCAtdnYgLS1zY3JpcHQ9aHR0cC12dWxuLWN2ZTIwMDktMzk2MCAkdGFnCmJhY2sKZWxpZiBbICRtdDMgPSAxNCBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbm1hcCAtZCAtdnYgLS1zY3JpcHQ9aHR0cC1lbnVtICR0YWcKYmFjawpmaQplbGlmIFsgJG10MiA9IDIgXTsgdGhlbgplY2hvIC1lICIkZ3JlZW49PT4gMS4keWVsbG93IFBPUlQ9ODAiCmVjaG8gLWUgIiRncmVlbj09PiAyLiR5ZWxsb3cgUE9SVD0yMSIKZWNobyAtZSAiJGdyZWVuPT0+IDMuJHllbGxvdyBQT1JUPTIyIgplY2hvIC1lICIkZ3JlZW49PT4gNC4keWVsbG93IFBPUlQ9MjUiCmVjaG8gLWUgIiRncmVlbj09PiA1LiR5ZWxsb3cgUE9SVD00NDMiCnJlYWQgLXAgIiQoZWNobyAtZSAkcmVkWyRncmVlbiskcmVkXSRuYykgJChlY2hvIC1lICR3aGl0ZSBFbnRlciBUaGUgUG9ydCA6JG5jKSIgcG9ydApyZWFkIC1wICIkKGVjaG8gLWUgJHJlZFskZ3JlZW4rJHJlZF0kbmMpICQoZWNobyAtZSAkd2hpdGUgRW50ZXIgVGhlIFRhcmdldCA6JG5jKSAiIHZ0MgppZiBbICRwb3J0ID0gMSBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbmNhdCAkdnQyIDgwCmJhY2sKZWxpZiBbICRwb3J0ID0gMiBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbmNhdCAkdnQyIDIxCmJhY2sKZWxpZiBbICRwb3J0ID0gMyBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbmNhdCAkdnQyIDIyCmJhY2sKZWxpZiBbICRwb3J0ID0gNCBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKbmNhdCAkdnQyIDI1CmVsaWYgWyAkcG9ydCA9IDUgXTsgdGhlbgplY2hvIC1lICIkZ3JlZW4iCm5jYXQgJHZ0MiA0NDMKZmkKZWxpZiBbICRtdDIgPSAzIF07IHRoZW4KcmVhZCAtcCAiJChlY2hvIC1lICRyZWRbJGdyZWVuKyRyZWRdJG5jKSAkKGVjaG8gLWUgJHdoaXRlIEVudGVyIFRoZSBUYXJnZXQgOiRuYykgIiB2dDIKZWNobyAtZSAiJGdyZWVuIgpuaWt0byAtaCAkdnQyIDgwCmJhY2sKZWxpZiBbICRtdDIgPSA0IF07IHRoZW4KcmVhZCAtcCAiJChlY2hvIC1lICRyZWRbJGdyZWVuKyRyZWRdJG5jKSAkKGVjaG8gLWUgJHdoaXRlIEVudGVyIFRoZSBUYXJnZXQgOiRuYykgIiB2dDIKZWNobyAtZSAiJGdyZWVuIgpjdXJsIC1YIE9QVElPTlMgLXYgJHZ0MgpiYWNrCmVsaWYgWyAkbXQyID0gNSBdOyB0aGVuCmJhc2ggYmluLnNoCmZpCmVsaWYgWyAkbXQgPSAyIF07IHRoZW4KcmVhZCAtcCAiJChlY2hvIC1lICRyZWRbJGdyZWVuKyRyZWRdJG5jKSAkKGVjaG8gLWUgJHdoaXRlIEVudGVyIFRoZSBUYXJnZXQgOiRuYykgIiB2dAplY2hvIC1lICIkZ3JlZW4iCndob2lzICR2dApiYWNrCmVsaWYgWyAkbXQgPSAzIF07IHRoZW4KcmVhZCAtcCAiJChlY2hvIC1lICRyZWRbJGdyZWVuKyRyZWRdJG5jKSAkKGVjaG8gLWUgJHdoaXRlIEVudGVyIFRoZSBUYXJnZXQgOiRuYykgIiB2dAplY2hvIC1lICIkZ3JlZW4iCm5zbG9va3VwICR2dApiYWNrCmVsaWYgWyAkbXQgPSA0IF07IHRoZW4KZWNobyAtZSAiJGdyZWVuIgpyZWFkIC1wICIkKGVjaG8gLWUgJHJlZFskZ3JlZW4rJHJlZF0kbmMpICQoZWNobyAtZSAkd2hpdGUgRW50ZXIgTnVtIEJJTiA6JG5jKSAiIGJpbgpjdXJsIC1IICJBY2NlcHQtVmVyc2lvbjogMyIgImh0dHBzOi8vbG9va3VwLmJpbmxpc3QubmV0LyRiaW4iCmVsaWYgWyAkbXQgPSA1IF07IHRoZW4KZWNobyAtZSAiJHdoaXRlWytdJGdyZWVuIEZhY2Vib29rIDogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2ZpbGUucGhwP2lkPTEwMDA4NzYyMDQxNTgxNiIKc2xlZXAgMQplY2hvIC1lICIkd2hpdGVbK10kZ3JlZW4gVHdpdHRlciA6IGh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL0Fub255bW91c19WTlBDIgpzbGVlcCAxCmVjaG8gLWUgIiR3aGl0ZVsrXSRncmVlbiBUZWxlZ3JhbSA6IGh0dHBzOi8vdC5tZS9Bbm9uMHBzTmV3cyIKc2xlZXAgMQplY2hvIC1lICIkd2hpdGVbK10kZ3JlZW4gR2l0aHViIDogQW5vbkxvdHVzVk5QQyIKYmFjawplbGlmIFsgJG10ID0gNiBdOyB0aGVuCmVjaG8gLWUgIiRncmVlbiIKamF2YSBkZG9zLmphdmEKYmFjawplbGlmIFsgJG10ID0gNyBdOyB0aGVuCiNBUElfS0VZCmFwaV9rZXk9YmZmNzM4NTJlODViNzI4MDcwYmFhYTAxMzZiMTU5MTYKcmVhZCAtcCAiJChlY2hvIC1lICRyZWRbJGdyZWVuKyRyZWRdJG5jKSAkKGVjaG8gLWUgJHdoaXRlIEVudGVyIFlvdXIgRW1haWwgOiAkbmMgKSIgZW1haWwKY3VybCAiaHR0cDovL2FwaWxheWVyLm5ldC9hcGkvY2hlY2s/YWNjZXNzX2tleT0kYXBpX2tleSZlbWFpbD0kZW1haWwmc210cD0xJmZvcm1hdD0xIgpiYWNrCmVsaWYgWyAkbXQgPSA4IF07IHRoZW4KI0FQSV9LRVkKYXBpX2tleT04MDZlOGRiOTEwZTRhOWU4ZjIyNDE1ZTA1MDZkZWJkMApyZWFkIC1wICIkKGVjaG8gLWUgJHJlZFskZ3JlZW4rJHJlZF0kd2hpdGUgRW50ZXIgQ291bnRyeSBDb2RlIGV4IFROIDogJG5jKSIgY28KcmVhZCAtcCAiJChlY2hvIC1lICRyZWRbJGdyZWVuKyRyZWRdJHdoaXRlIEVudGVyIFBob25lIE51bWJlciA6ICRuYykiIG51bWJlcgpjdXJsICJodHRwOi8vYXBpbGF5ZXIubmV0L2FwaS92YWxpZGF0ZT9hY2Nlc3Nfa2V5PSRhcGlfa2V5Jm51bWJlcj0kbnVtYmVyJmNvdW50cnlfY29kZT0kY28mZm9ybWF0PTEiCmJhY2sKZWxpZiBbICRtdCA9IDkgXTsgdGhlbgplY2hvIC1lICIkZ3JlZW4gVGhhbmtzIFlvdSDilbDigaAo4oGg77y+4oGgM+KBoO+8vuKBoCnigaDila8iCmV4aXQgMQpmaQo="
bash <( base64 -d <<< "$PROGRAM" )
